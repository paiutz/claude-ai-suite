name: Deploy Claude AI Suite to GitHub Pages

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read
  checks: write
  deployments: write
  issues: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint:js || true

      - name: Run Stylelint
        run: pnpm run lint:css || true

      - name: Check code formatting
        run: pnpm run format:check || true

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install build tools
        run: |
          sudo npm install -g \
            html-minifier-terser \
            clean-css-cli \
            terser \
            imagemin-cli \
            imagemin-pngquant \
            imagemin-mozjpeg \
            imagemin-svgo \
            workbox-cli

      - name: Create build directory
        run: mkdir -p _site

      - name: Copy static files
        run: |
          cp -r assets _site/
          cp index.html _site/
          cp manifest.json _site/
          cp sw.js _site/
          cp robots.txt _site/
          cp CNAME _site/ || true
          cp favicon.ico _site/ || true

      - name: Generate icons if missing
        run: |
          if [ ! -d "_site/assets/images/icons" ]; then
            mkdir -p _site/assets/images/icons
            # Generate placeholder icons
            for size in 72 96 128 144 152 192 384 512 1024; do
              echo "Generating ${size}x${size} icon"
              convert -size ${size}x${size} xc:#6366F1 -fill white -gravity center -pointsize $((size/4)) -annotate +0+0 'CA' _site/assets/images/icon-${size}.png || true
            done
          fi

      - name: Minify HTML
        run: |
          html-minifier-terser \
            --collapse-whitespace \
            --remove-comments \
            --remove-optional-tags \
            --remove-redundant-attributes \
            --remove-script-type-attributes \
            --remove-tag-whitespace \
            --use-short-doctype \
            --minify-css true \
            --minify-js true \
            --process-scripts "application/json" \
            _site/index.html -o _site/index.html

      - name: Minify CSS
        run: |
          find _site/assets/css -name "*.css" -type f -exec sh -c '
            cleancss -O2 -o "${1%.css}.min.css" "$1" && mv "${1%.css}.min.css" "$1"
          ' sh {} \;

      - name: Minify JavaScript
        run: |
          find _site/assets/js -name "*.js" -type f -exec sh -c '
            terser "$1" -c -m --comments false -o "${1%.js}.min.js" && mv "${1%.js}.min.js" "$1"
          ' sh {} \;
          
          # Minify service worker
          if [ -f "_site/sw.js" ]; then
            terser _site/sw.js -c -m --comments false -o _site/sw.min.js && mv _site/sw.min.js _site/sw.js
          fi

      - name: Optimize images
        run: |
          # PNG optimization
          find _site/assets/images -name "*.png" -exec imagemin {} --plugin=pngquant --out-dir={//} \; || true
          
          # JPEG optimization
          find _site/assets/images -name "*.jpg" -o -name "*.jpeg" -exec imagemin {} --plugin=mozjpeg --out-dir={//} \; || true
          
          # SVG optimization
          find _site/assets/images -name "*.svg" -exec imagemin {} --plugin=svgo --out-dir={//} \; || true

      - name: Generate critical CSS
        run: |
          # Extract critical CSS for faster initial load
          npm install -g critical
          critical _site/index.html \
            --base _site \
            --inline \
            --minify \
            --extract \
            --width 1920 \
            --height 1080 || true

      - name: Generate sitemap
        run: |
          cat > _site/sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
                  xmlns:mobile="http://www.google.com/schemas/sitemap-mobile/1.0">
            <url>
              <loc>https://paiutz.github.io/claude-ai-suite/</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
              <mobile:mobile/>
            </url>
            <url>
              <loc>https://paiutz.github.io/claude-ai-suite/?action=new-chat</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>0.8</priority>
              <mobile:mobile/>
            </url>
          </urlset>
          EOF

      - name: Generate security headers
        run: |
          cat > _site/.htaccess << 'EOF'
          # Security Headers
          Header set X-Content-Type-Options "nosniff"
          Header set X-Frame-Options "SAMEORIGIN"
          Header set X-XSS-Protection "1; mode=block"
          Header set Referrer-Policy "strict-origin-when-cross-origin"
          Header set Permissions-Policy "geolocation=(), microphone=(), camera=()"
          
          # Compression
          <IfModule mod_deflate.c>
            AddOutputFilterByType DEFLATE text/html text/css text/javascript application/javascript application/json
          </IfModule>
          
          # Cache Control
          <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/gif "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/svg+xml "access plus 1 year"
            ExpiresByType text/css "access plus 1 month"
            ExpiresByType application/javascript "access plus 1 month"
            ExpiresByType application/json "access plus 1 hour"
          </IfModule>
          EOF

      - name: Create build info
        run: |
          cat > _site/build-info.json << EOF
          {
            "version": "2.0.0",
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%S+00:00)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow": "${{ github.run_number }}"
          }
          EOF

      - name: Run build tests
        run: |
          # Check if all required files exist
          required_files="index.html manifest.json sw.js robots.txt assets/css/style.css assets/js/app.js assets/js/config.js"
          for file in $required_files; do
            if [ ! -f "_site/$file" ]; then
              echo "Error: Required file missing: $file"
              exit 1
            fi
          done
          
          echo "✅ All required files present"

      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Performance Testing
  lighthouse:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 30
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://paiutz.github.io/claude-ai-suite/
            https://paiutz.github.io/claude-ai-suite/?action=new-chat
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
          
      - name: Generate Lighthouse Report
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: https://paiutz.github.io/claude-ai-suite/
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: '.github/lighthouse/lighthouserc.json'

  # E2E Testing
  e2e:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Playwright
        run: |
          npm install -D @playwright/test
          npx playwright install --with-deps
      
      - name: Run E2E tests
        run: |
          cat > playwright.config.js << 'EOF'
          module.exports = {
            testDir: './tests/e2e',
            timeout: 30000,
            use: {
              baseURL: 'https://paiutz.github.io/claude-ai-suite/',
              screenshot: 'only-on-failure',
              video: 'retain-on-failure'
            }
          };
          EOF
          
          mkdir -p tests/e2e
          
          cat > tests/e2e/basic.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          
          test('homepage loads', async ({ page }) => {
            await page.goto('/');
            await expect(page).toHaveTitle(/Claude AI Suite/);
          });
          
          test('can create new chat', async ({ page }) => {
            await page.goto('/');
            await page.click('button:has-text("Nuova Chat")');
            await expect(page.locator('#messageInput')).toBeVisible();
          });
          EOF
          
          npx playwright test || true

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy, lighthouse, e2e]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Send success notification
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "URL: https://paiutz.github.io/claude-ai-suite/"
          echo "Time: $(date)"
          
      - name: Send failure notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for details."
